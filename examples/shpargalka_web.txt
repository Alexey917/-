Порядок действий при разработке:
  1. Берем шаблон стартовой верстки из github(в нем есть normalize)
  2. Тренируем Emmet перед версткой 5 мин.
  3. Создать robot.txt если это учебный проект
  4. Верстка
  5. Валидация html
  6. Создание эффектов (hover, приколюхи)
  7. Префиксы
  8. Адаптив
  9. Переполняемость (в консоли document.designMode='on')
  10. Кроссбраузерность
  11. Заливаем на хостинг (FTP-client)
  12. Прогоняем через pagespeed
  13. Сжимаем картинки через tinypng, конвертируем в webp, font-display: swap - подгружает текст без шрифта в начале(для ускорения загрузки страницы), добавляем тег picture,  modernizr - скрипт чтобы использовать webp в css (.no-webp .header-image/ .header-image), импортируем normilize, шрифты в style.css(по возможности), сжимаем css (по возможности), делаем фиксированные ширину и высоту у картинок
  14. Проверка в эмуляторе
  15. Добавляем .htaccess файл для https и установки времени хранения картинок в кеш
  16. Финальная выгрузка файлов



Заметки:
  - постоянные комиты, разбиение цели на мелкие (оч.мелкие) задачи
  - ReadMe.md ### Заголовок(можно написать свое имя, тип автор)
  - клонируя репо, можно удалить папку git  и таким образом начать другой проект
  - UAkit оттуда можно брать готовые дизайн элементы
  - сопроводительное письмо подробно описывает ключевые навыки указанные в резюме. Этот текст также можно поместить в раздел "о себе", в соц.сетях или на своем сайте.
  - правила написания html и css кода (чекай курс)
  - в стилях применяем:
  * {
    box-sizing: border-box;
  } 

  - max-width и margin: auto - помогут центрировать объект
  - google fonts - для шрифтов(но они с лицензией)
  - строчные элементы не имеют высоты и ширины, внешние отступы тоже не работают, кроме margin-left и margin-right
  - vh и vw ширина, высота в процентах от всего экрана
  - inline flex расположит два флексовых элемента в строку
  - flex-basis аналог width/height
  - flex-grow заполнить свободный пространство под указанный элемент
  - flex-shrink сжатие элемента
  - обновить файл со стилями можно href=css/stye.css?v=1.1
  - у заказчика есть хостинг:
      берем данные его билинга(лич.каб)
      данные (пароль, логин) бд
      данные FTP + адрес
    у заказчика нет хостинга:
      делаем ему реферальную ссылку, чтобы он сам зарегался
      оформляем ему сами, берем его паспортные данные
  - плагин font fascia в figma покажет все шрифты в вашем макете
  - webfonts сайт, скачать нужный шрифт, если его нет в достать google font
  - в формате woff2 (url: woff и woff2 и адрес не забыть указать)
  - svg sprites, в html: 
    <svg class="класс">
      <use href="путь#id"></use>
    </svg>
  - расширение Perfect Pixel для хрома
  - используем pixel perfect если у нас есть макет сайта (но это если заказчик просит или нам нужно все идеально)
  - когда изучили что то новое добавляем это в ключевые навыки, а описывать их нужно в сопроводительном письме
  - плагин px to rem ставим: 
    html {
      font-size: 16px; - для адаптива (в медиа запросах уменьшаем, но стараемся не делать шрифт меньше 10 пикселей)
    }
  - в sprite вырезать fill и в css задать свой fill
  - если что-то повторяется нужно создать функцию
  - swiper.bundle.min.css, swiper.bundle.min.js - подключаем swiperjs (урок: адаптив главного экрана)
  - валидация html через w3.org
  - в консоли бразуера document.designMode = "on" - проверка на Переполняемость
  - header:hover::after {} - наведение на псевдоэлемент
  - елси навели на элемент и внутри нам нужно что то отдельное покрасить card:hover .card-title {}
  - установить zeplin и плагин в figma(zeplin) (урок: мобильный адаптив)
  - css grid generator - можно взять готовый код для грид разметки
  - чтобы картинка с absolute не вываливалась, задаем ей height: 100%, а родителю указываем min-height
  - boostrap раздел grid - там можно посмотреть стандартные размеры экранов
  - мои варианты размеров (1960, 1700, 1460, 1200, 992, 768, 576, 480, 375, 320)
  - @media (hover:hover) {} - для hover-эффектов, ну или @media (min-width: 992px) {}
  - в учебе всегда старайся хвалить себя
  - action в form это путь куда мы перенаправим пользователя
  - ~ -рядом стоящий компонент(класс)
  - outline - стандартная бразуреная обводка input'а 
  - input:not(:placeholder-show).input:not(focus) - если нет плейсхоледра и input не в фокусе
  - column: размер auto и min-width: размер - поможет сделать адаптивные колонки
  - про event.target и modalDialog (урок: бонус крипт модального окна)
  - open server для php / live server web extension для соединения live server'a из vscode и open server
  - одинаковые компоненты можно вырезать в отдельный файл
  - get-запрос видно в поисковой строке
  - method post - позволяет скрыто отправить данные
  - если php htmlspecialchars($_POST["username"]) - защита от вредоносного кода
  - чат бота для отправки формы в тг:
    1. botfather
    2. придумываем иям бота
    3. ссылку придумываем
    4. он выдает нам токен
    5. заносим ее в переменную 
    6. запускаем бота по ссылке
    7. создаем группу
    8. добавляем в нее бота
    9. узнать id чата
    10. добавим в него id-бот(ссылка в уроке)
    11. он выдает id чата
    12. переходим в telegram.org
    13. API
    14. full API refernce (в тексте)
    15. Available methods
    16. в php (типо open file функцией) открыть https://api.telergam.org/bot{token}/sendMessage?chat_id={chat_id_peremennaya}&text={user_name}
    17. создаем словарь и передаем его в text
  - ajax это функция fetch в js
  - can i use сервис для определение свойств работающий в разных браузерах
  - если наш проект учебный то добавляем в него файл robot.txt
